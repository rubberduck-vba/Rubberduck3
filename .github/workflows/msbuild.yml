name: MSBuild

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  SOLUTION_FILE_PATH: .
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: Cache NuGet packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.nuget/packages
          !~/.nuget/packages/**/content*
          !~/.nuget/packages/**/contentFiles*
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.sha }}
        release_name: Release ${{ github.sha }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      if: steps.create_release.conclusion == 'success'
      run: |
        $outputFolder = Join-Path ${{ env.GITHUB_WORKSPACE }} "${{env.SOLUTION_FILE_PATH}}\bin\Release"
        $files = Get-ChildItem -Path $outputFolder -Recurse -File
        foreach ($file in $files) {
          $filePath = $file.FullName
          $fileMimeType = (Get-Item $filePath | Get-FileMimeType)
          echo "Uploading $filePath with MIME type $fileMimeType"
          $args = @{
            "upload_url" = "${{ steps.create_release.outputs.upload_url }}"
            "asset_path" = "$filePath"
            "asset_name" = $file.Name
            "asset_content_type" = "$fileMimeType"
          }
          gh release upload @args
        }
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
