<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:Rubberduck.UI.Converters"
                    xmlns:shell="clr-namespace:Rubberduck.UI.Shell" 
                    xmlns:dockablz="http://dragablz.net/winfx/xaml/dockablz"
                    xmlns:dragablz="http://dragablz.net/winfx/xaml/dragablz">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Dragablz;component/Themes/Generic.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Rubberduck.UI;component/Styles/Icons.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Rubberduck.UI;component/Themes/LightTheme.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Rubberduck.UI;component/Styles/SectionExpander.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--<Style TargetType="ScrollViewer">
        <Style.Setters>
            <Setter Property="b:ScrollViewerCorrector.FixScrolling" Value="True" />
        </Style.Setters>
    </Style>-->
    <Color x:Key="ThemeWhiteDarkColor">#FFA9A9A9</Color>
    <Color x:Key="ThemeWhiteMediumColor">#FFD3D3D3</Color>
    <Color x:Key="ThemeWhiteLightColor">#FFFFFFFF</Color>
    <Color x:Key="ThemeWhiteDarkColor50">#0FA9A9A9</Color>
    <Color x:Key="ThemeWhiteMediumColor50">#0FD3D3D3</Color>
    <Color x:Key="ThemeWhiteLightColor75">#A0FFFFFF</Color>
    <Color x:Key="ThemeWhiteLightColor50">#0FFFFFFF</Color>
    <Color x:Key="ThemeWhiteDarkColor25">#08A9A9A9</Color>
    <Color x:Key="ThemeWhiteMediumColor25">#08D3D3D3</Color>
    <Color x:Key="ThemeWhiteLightColor25">#08FFFFFF</Color>

    <SolidColorBrush x:Key="ThemeWhiteDarkColorBrush" Color="{DynamicResource ThemeWhiteDarkColor}" />
    <SolidColorBrush x:Key="ThemeWhiteMediumColorBrush" Color="{DynamicResource ThemeWhiteMediumColor}" />
    <SolidColorBrush x:Key="ThemeWhiteLightColorBrush" Color="{DynamicResource ThemeWhiteLightColor}" />
    <SolidColorBrush x:Key="ThemeWhiteLightColorBrush75" Color="{DynamicResource ThemeWhiteLightColor75}" />
    <SolidColorBrush x:Key="ThemeWhiteDarkColorBrush50" Color="{DynamicResource ThemeWhiteDarkColor50}" />
    <SolidColorBrush x:Key="ThemeWhiteMediumColorBrush50" Color="{DynamicResource ThemeWhiteMediumColor50}" />
    <SolidColorBrush x:Key="ThemeWhiteLightColorBrush50" Color="{DynamicResource ThemeWhiteLightColor50}" />
    <SolidColorBrush x:Key="ThemeWhiteDarkColorBrush25" Color="{DynamicResource ThemeWhiteDarkColor25}" />
    <SolidColorBrush x:Key="ThemeWhiteMediumColorBrush25" Color="{DynamicResource ThemeWhiteMediumColor25}" />
    <SolidColorBrush x:Key="ThemeWhiteLightColorBrush25" Color="{DynamicResource ThemeWhiteLightColor25}" />

    <Color x:Key="ThemeBlackDarkColor">#FF1E1E1E</Color>
    <Color x:Key="ThemeBlackMediumColor">#FF2E2E2E</Color>
    <Color x:Key="ThemeBlackLightColor">#FF333333</Color>
    <Color x:Key="ThemeBlackDarkColor75">#A01E1E1E</Color>
    <Color x:Key="ThemeBlackDarkColor50">#C01E1E1E</Color>
    <Color x:Key="ThemeBlackMediumColor50">#0F2E2E2E</Color>
    <Color x:Key="ThemeBlackLightColor50">#C0333333</Color>
    <Color x:Key="ThemeBlackDarkColor25">#0F1E1E1E</Color>
    <Color x:Key="ThemeBlackMediumColor25">#0F2E2E2E</Color>
    <Color x:Key="ThemeBlackLightColor25">#0F333333</Color>

    <SolidColorBrush x:Key="ThemeBlackDarkColorBrush" Color="{DynamicResource ThemeBlackDarkColor}" />
    <SolidColorBrush x:Key="ThemeBlackMediumColorBrush" Color="{DynamicResource ThemeBlackMediumColor}" />
    <SolidColorBrush x:Key="ThemeBlackLightColorBrush" Color="{DynamicResource ThemeBlackLightColor}" />
    <SolidColorBrush x:Key="ThemeBlackDarkColorBrush50" Color="{DynamicResource ThemeBlackDarkColor50}" />
    <SolidColorBrush x:Key="ThemeBlackDarkColorBrush75" Color="{DynamicResource ThemeBlackDarkColor75}" />
    <SolidColorBrush x:Key="ThemeBlackMediumColorBrush50" Color="{DynamicResource ThemeBlackMediumColor50}" />
    <SolidColorBrush x:Key="ThemeBlackLightColorBrush50" Color="{DynamicResource ThemeBlackLightColor50}" />
    <SolidColorBrush x:Key="ThemeBlackDarkColorBrush25" Color="{DynamicResource ThemeBlackDarkColor25}" />
    <SolidColorBrush x:Key="ThemeBlackMediumColorBrush25" Color="{DynamicResource ThemeBlackMediumColor25}" />
    <SolidColorBrush x:Key="ThemeBlackLightColorBrush25" Color="{DynamicResource ThemeBlackLightColor25}" />

    <converters:WrapPanelItemWidthConverter x:Key="WrapPanelItemWidthConverter" />
    <converters:BoolToVisibleVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <converters:BoolToHiddenVisibilityConverter x:Key="BoolToHiddenVisibility" />
    <converters:InvertBoolValueConverter x:Key="InverseBoolConverter" />
    <converters:SelectedItemToBooleanConverter x:Key="HasSelectedItems"/>
    <converters:HasItemsBoolConverter x:Key="HasItemsBoolConverter" />
    <converters:HasItemsVisibilityConverter x:Key="HasItemsVisibilityConverter" />
    <converters:WindowStateToVisibilityConverter x:Key="WindowStateToRestoreVisibility" VisibleState="Maximized" HiddenState="Normal" />
    <converters:WindowStateToVisibilityConverter x:Key="WindowStateToMaximizeVisibility" VisibleState="Normal" HiddenState="Maximized" />
    <converters:SupportedDocumentTypeToIconConverter x:Key="DocumentTypeToIconConverter" />
    <converters:ServerConnectionStateToIconConverter x:Key="ServerConnectionStateToIconConverter" />
    <converters:LogLevelToIconConverter x:Key="LogLevelIconConverter" />

    <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="{DynamicResource ThemeAccent1MediumColor}"/>
    <SolidColorBrush x:Key="TextBox.Focus.Border" Color="{DynamicResource ThemeAccent1DarkColor}"/>
        
    <Style x:Key="ScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="1"/>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanHorizontallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" CanVerticallyScroll="False" Grid.Column="0" Content="{TemplateBinding Content}" CanContentScroll="{TemplateBinding CanContentScroll}" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="ToolWindowTemplate" TargetType="{x:Type Window}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <Border Grid.RowSpan="2" 
                    Background="{DynamicResource ThemeBackgroundMediumColorBrush}">
                <Border.Effect>
                    <DropShadowEffect BlurRadius="20" ShadowDepth="2" Direction="-75" Opacity="0.8" Color="{DynamicResource ThemeTextColor}" />
                </Border.Effect>
            </Border>



            <Border Grid.Row="1" Background="{DynamicResource ThemeBackgroundLightColorBrush}" Margin="8" CornerRadius="12">
                <ContentPresenter x:Name="ClientArea" Content="{TemplateBinding Content}" />
            </Border>

        </Grid>
    </ControlTemplate>
    
    <ControlTemplate x:Key="WindowTemplate" TargetType="{x:Type Window}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <Border Grid.RowSpan="2" 
                    Background="{DynamicResource ThemeBackgroundMediumColorBrush}">
                <Border.Effect>
                    <DropShadowEffect BlurRadius="20" ShadowDepth="2" Direction="-75" Opacity="0.8" Color="{DynamicResource ThemeTextColor}" />
                </Border.Effect>
            </Border>

            <Border>
                <Border.Background>
                    <LinearGradientBrush StartPoint="-1,0" EndPoint="1,0">
                        <GradientStop Offset="0" Color="Transparent" />
                        <GradientStop Offset="1" Color="{DynamicResource ThemeBackgroundDarkColor}" />
                    </LinearGradientBrush>
                </Border.Background>
            </Border>

            <!-- Title bar -->
            
            <DockPanel Margin="10,10,10,0"
                       HorizontalAlignment="Left" 
                       VerticalAlignment="Top">
                
                <Button DockPanel.Dock="Left"
                        Command="{x:Static SystemCommands.ShowSystemMenuCommand}">
                    <Button.Template>
                        <ControlTemplate>
                            <Image x:Name="AppIcon" 
                                   Width="20" 
                                   Height="20" 
                                   Stretch="UniformToFill"
                                   VerticalAlignment="Top" 
                                   HorizontalAlignment="Left"
                                   Source="{Binding Icon, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" />
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                
                <TextBlock x:Name="AppTitle" 
                           DockPanel.Dock="Left"
                           Margin="6,2"
                           Text="{Binding Title, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" 
                           FontWeight="SemiBold" 
                           Foreground="{DynamicResource ThemeTextColorBrush}" />
            </DockPanel>
            
            <TextBlock x:Name="ActiveDocumentTitle" Margin="0,2"
                        VerticalAlignment="Top" 
                        HorizontalAlignment="Center"
                        Text="" /> <!-- TODO binding here -->

            <!-- TODO templates! -->
            <DockPanel VerticalAlignment="Top" 
                       HorizontalAlignment="Right">

                <Border DockPanel.Dock="Right">
                    <Border.Style>
                        <Style TargetType="Border">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsMouseOver, ElementName=ControlBoxCloseButton}" Value="True">
                                    <DataTrigger.Setters>
                                        <Setter Property="Background" Value="DarkRed" />
                                    </DataTrigger.Setters>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>
                    <shell:FlatButton x:Name="ControlBoxCloseButton" 
                                      WindowChrome.IsHitTestVisibleInChrome="True"
                                      Margin="4"
                                      Icon="{DynamicResource XMarkIcon}"
                                      HighlightBrush="{DynamicResource ThemeWhiteLightColorBrush}"
                                      Command="{x:Static SystemCommands.CloseWindowCommand}" 
                                      ToolTip="Close" />
                </Border>

                <Border DockPanel.Dock="Right">
                    <shell:FlatButton x:Name="ControlBoxMaximizeButton" 
                                  WindowChrome.IsHitTestVisibleInChrome="True"
                                  Margin="4,0"
                                  Icon="{DynamicResource WindowMaximizeIcon}"
                                  Command="{x:Static SystemCommands.MaximizeWindowCommand}" 
                                  Visibility="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}, Converter={StaticResource WindowStateToMaximizeVisibility}}"
                                  ToolTip="Maximize">
                    </shell:FlatButton>
                </Border>

                <Border DockPanel.Dock="Right">
                    <shell:FlatButton x:Name="ControlBoxRestoreButton" 
                                  WindowChrome.IsHitTestVisibleInChrome="True"
                                  Margin="4,0"
                                  Icon="{DynamicResource WindowRestoreIcon}"
                                  Command="{x:Static SystemCommands.RestoreWindowCommand}" 
                                  Visibility="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}, Converter={StaticResource WindowStateToRestoreVisibility}}"
                                  ToolTip="Restore">
                    </shell:FlatButton>
                </Border>

                <Border DockPanel.Dock="Right">
                    <shell:FlatButton x:Name="ControlBoxMinimizeButton" 
                                  WindowChrome.IsHitTestVisibleInChrome="True"
                                  DockPanel.Dock="Right"
                                  Height="16"
                                  Margin="4,0"
                                  Icon="{DynamicResource WindowMinimizeIcon}"
                                  Command="{x:Static SystemCommands.MinimizeWindowCommand}" 
                                  ToolTip="Minimize" />
                </Border>

                <!-- button bound to SystemCommands.RestoreWindowCommand to show Win11 snap tool on hover despite restore command being disabled (WPF bug) -->
                <!--<shell:FlatButton x:Name="ControlBoxWindowsButton" 
                                  WindowChrome.IsHitTestVisibleInChrome="True"
                                  VerticalContentAlignment="Center"
                                  Height="16"
                                  DockPanel.Dock="Right"
                                  Margin="5,0"
                                  Icon="{DynamicResource WindowsIcon}"
                                  Command="{x:Static SystemCommands.RestoreWindowCommand}" />-->

            </DockPanel>

            <Border Grid.Row="1" Background="{DynamicResource ThemeBackgroundLightColorBrush}" Margin="8" CornerRadius="12">
                <ContentPresenter x:Name="ClientArea" Content="{TemplateBinding Content}" />
            </Border>
            
        </Grid>
    </ControlTemplate>

        <!-- note: key seems to be required, WindowChrome doesn't seem to work correctly without :( -->
    <Style x:Key="ThemedWindowStyle" TargetType="{x:Type Window}">
        <Style.Setters>
            <Setter Property="Icon" Value="{StaticResource DuckyIcon}" />
            <Setter Property="Title" Value="Rubberduck" />
            <Setter Property="MinHeight" Value="200" />
            <Setter Property="MinWidth" Value="400" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="FontFamily" Value="Segoe UI" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="WindowState" Value="Normal" />
            <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1LightColorBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Background" Value="{DynamicResource ThemeBackgroundDarkColorBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextBackgroundDarkColorBrush}" />
        </Style.Setters>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ShowInTaskbar, RelativeSource={RelativeSource Mode=Self}}" Value="True" />
                    <Condition Binding="{Binding Chrome.ExtendWindowChrome}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{DynamicResource WindowTemplate}" />
                    <Setter Property="WindowChrome.WindowChrome">
                        <Setter.Value>
                            <WindowChrome />
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ThemedToolWindowStyle" TargetType="{x:Type Window}">
        <Style.Setters>
            <Setter Property="Icon" Value="{StaticResource DuckyIcon}" />
            <Setter Property="Title" Value="Rubberduck" />
            <Setter Property="MinHeight" Value="200" />
            <Setter Property="MinWidth" Value="300" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="FontFamily" Value="Segoe UI" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="WindowState" Value="Normal" />
            <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1LightColorBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Background" Value="{DynamicResource ThemeBackgroundDarkColorBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextBackgroundDarkColorBrush}" />
        </Style.Setters>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ShowInTaskbar, RelativeSource={RelativeSource Mode=Self}}" Value="True" />
                    <Condition Binding="{Binding Chrome.ExtendWindowChrome}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{DynamicResource ToolWindowTemplate}" />
                    <Setter Property="WindowChrome.WindowChrome">
                        <Setter.Value>
                            <WindowChrome />
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ActionButtonStyle" TargetType="Button">
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="4" />
                <Setter Property="Margin" Value="5,0" />
            </Style>
        </Style.Resources>
        <Style.Setters>
            <Setter Property="MinWidth" Value="96" />
            <Setter Property="Height" Value="24" />
            <Setter Property="Padding" Value="8,0"/>
            <Setter Property="Background" Value="{DynamicResource ThemeBackgroundColorBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextBackgroundColorBrush}"/>
        </Style.Setters>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsDefault, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource ThemeAccent1TextColorBrush}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource ThemeAccent1TextColorBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="FormFieldNameLabelStyle" TargetType="Label">
        <Style.Setters>
            <Setter Property="FontSize" Value="14" />
            <Setter Property="FontWeight" Value="SemiBold" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextBackgroundColorBrush}"/>
            <Setter Property="Margin" Value="0,5,0,0" />
            <Setter Property="MinHeight" Value="24" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
        </Style.Setters>
    </Style>

    <Style x:Key="TabTitleLabelStyle" TargetType="Label" BasedOn="{StaticResource FormFieldNameLabelStyle}">
        <Style.Setters>
            <Setter Property="FontSize" Value="12" />
            <Setter Property="FontWeight" Value="Regular" />
        </Style.Setters>
    </Style>

    <Style x:Key="WindowTitleLabelStyle" TargetType="Label" BasedOn="{StaticResource FormFieldNameLabelStyle}">
        <Style.Setters>
            <Setter Property="FontSize" Value="16" />
        </Style.Setters>
    </Style>

    <Style x:Key="FormTitleLabelStyle" TargetType="Label" BasedOn="{StaticResource FormFieldNameLabelStyle}">
        <Style.Setters>
            <Setter Property="FontSize" Value="16" />
        </Style.Setters>
    </Style>

    
    <Style x:Key="FormLabelStyleMedium" TargetType="Label" BasedOn="{StaticResource FormFieldNameLabelStyle}">
        <Style.Setters>
            <Setter Property="FontSize" Value="14" />
        </Style.Setters>
    </Style>

    <Style x:Key="FormLabelStyleSmall" TargetType="Label" BasedOn="{StaticResource FormFieldNameLabelStyle}">
        <Style.Setters>
            <Setter Property="FontSize" Value="12" />
        </Style.Setters>
    </Style>

    <Style x:Key="FormFieldValueLabelStyle" TargetType="Label">
        <Style.Setters>
            <Setter Property="BorderBrush" Value="{DynamicResource ThemeWhiteDarkColorBrush}" />
            <Setter Property="FontSize" Value="11" />
            <Setter Property="Height" Value="24" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextInactiveColorBrush}" />
        </Style.Setters>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TraceLogRecordLabelStyle" TargetType="Label">
        <Style.Setters>
            <Setter Property="BorderBrush" Value="{DynamicResource ThemeWhiteDarkColorBrush}" />
            <Setter Property="FontSize" Value="11" />
            <Setter Property="FontWeight" Value="Light" />
            <Setter Property="FontFamily" Value="Cascadia Mono" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextColorBrush}" />
        </Style.Setters>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FormFieldDescriptionLabelStyle" TargetType="Label">
        <Style.Setters>
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextInactiveColorBrush}" />
        </Style.Setters>
    </Style>
    
    <Style x:Key="FormFieldTextBoxStyle" TargetType="TextBox">
        <Style.Setters>
            <Setter Property="Padding" Value="4,0" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Height" Value="24" />
            <Setter Property="MaxLines" Value="1" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Background" Value="{DynamicResource ThemeBackgroundDarkColorBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextBackgroundColorBrush}"/>
        </Style.Setters>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource ThemeBackgroundLightColorBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource ThemeBackgroundLightColorBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="FormFieldReadOnlyTextBoxStyle" TargetType="TextBox">
        <Style.Setters>
            <Setter Property="Padding" Value="4,0" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Height" Value="24" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Background" Value="{DynamicResource ThemeBackgroundDarkColorBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextBackgroundColorBrush}"/>
        </Style.Setters>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FormFieldComboBoxStyle" TargetType="ComboBox">
        <Style.Setters>
            <Setter Property="Height" Value="24" />
            <Setter Property="Background" Value="{DynamicResource ThemeBackgroundDarkColorBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource ThemeTextColorBrush}" />
        </Style.Setters>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}">
                <Setter Property="Cursor" Value="Hand" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ListItemTitleLabelStyle" TargetType="Label" BasedOn="{StaticResource FormFieldNameLabelStyle}">
        <Style.Setters>
            <Setter Property="FontSize" Value="16" />
            <Setter Property="FontWeight" Value="Regular" />
        </Style.Setters>
    </Style>
    
    <Style x:Key="SectionTitleLabelStyle" TargetType="Label" BasedOn="{StaticResource FormFieldNameLabelStyle}">
        <Style.Setters>
            <Setter Property="FontSize" Value="14" />
            <Setter Property="FontWeight" Value="SemiBold" />
        </Style.Setters>
    </Style>

    <Style x:Key="SectionBorderStyle" TargetType="Border">
        <Style.Setters>
            <Setter Property="Background" Value="{DynamicResource ThemeBackgroundMediumColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ThemeBackgroundDarkColorBrush}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="CornerRadius" Value="8" />
            <Setter Property="Padding" Value="10,10,10,10" />
        </Style.Setters>
    </Style>

    <Style x:Key="SectionExpanderHeaderStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="13" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="Foreground" Value="{DynamicResource ThemeTextColorBrush}" />
    </Style>

    <Style x:Key="ListViewContainerStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="BorderThickness" Value="1.5"/>
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=OneWay}" />
        <Setter Property="Visibility" Value="{Binding Filtered, Mode=OneWay, Converter={StaticResource BoolToHiddenVisibility}}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <Style x:Key="TreeViewContainerStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="BorderThickness" Value="1.5"/>
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
        <Setter Property="Visibility" Value="{Binding Filtered, Mode=OneWay, Converter={StaticResource BoolToHiddenVisibility}}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <!--<EventSetter Event="MouseDoubleClick" Handler="TreeView_OnMouseDoubleClick" />
        <EventSetter Event="MouseRightButtonDown" Handler="TreeView_OnMouseRightButtonDown" />
        <EventSetter Event="DragOver" Handler="TreeView_OnDragOver" />
        <EventSetter Event="Drop" Handler="TreeView_OnDrop" />
        <EventSetter Event="PreviewQueryContinueDrag" Handler="TreeView_PreviewContinueDrag" />
        <EventSetter Event="PreviewMouseLeftButtonDown" Handler="TreeView_PreviewMouseLeftButtonDown" />
        <EventSetter Event="PreviewMouseMove" Handler="TreeView_PreviewMouseMove" />-->
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource HighlightBorderActiveBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{StaticResource HighlightInactiveBorderBrush}"/>
            </MultiTrigger>
        </Style.Triggers>
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="2"/>
            </Style>
        </Style.Resources>
    </Style>

    <Style TargetType="{x:Type dockablz:DropZone}">
        <Setter Property="Foreground" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
        <Setter Property="Opacity" Value=".25" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dockablz:DropZone}">
                    <Grid>
                        <Rectangle VerticalAlignment="Top" HorizontalAlignment="Center" Height="24" Width="100" Fill="{TemplateBinding Foreground}" 
                                   Visibility="{TemplateBinding Location, Converter={StaticResource EqualityToVisibilityConverter}, ConverterParameter={x:Static dockablz:DropZoneLocation.Top}}" />

                        <Rectangle VerticalAlignment="Center" HorizontalAlignment="Left" Height="100" Width="24" Fill="{TemplateBinding Foreground}" 
                                   Visibility="{TemplateBinding Location, Converter={StaticResource EqualityToVisibilityConverter}, ConverterParameter={x:Static dockablz:DropZoneLocation.Left}}" />

                        <Rectangle VerticalAlignment="Center" HorizontalAlignment="Right" Height="100" Width="24" Fill="{TemplateBinding Foreground}" 
                                   Visibility="{TemplateBinding Location, Converter={StaticResource EqualityToVisibilityConverter}, ConverterParameter={x:Static dockablz:DropZoneLocation.Right}}" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsOffered" Value="True">
                <Setter Property="Opacity" Value="0.5" />
                <Setter Property="Foreground" Value="{DynamicResource ThemeAccent1LightColorBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolPanelVExpanderThumbStyle" TargetType="Thumb">
        <Setter Property="Width" Value="4" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1LightColorBrush}" />
                <Setter Property="Opacity" Value="0.5" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsDragging, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolPanelHExpanderThumbStyle" TargetType="Thumb">
        <Setter Property="Height" Value="4" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1LightColorBrush}" />
                <Setter Property="Opacity" Value="0.5" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsDragging, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeAccent1DarkColorBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>